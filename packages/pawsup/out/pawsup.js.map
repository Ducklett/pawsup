{
  "version": 3,
  "sources": ["..\\src\\pawsup.ts"],
  "sourcesContent": [
    "/*\r\n## This software is available under 2 licenses -- choose whichever you prefer.\r\n\r\nALTERNATIVE A - MIT License\r\nCopyright (c) 2017 Ivy Dingeman\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\n---\r\n\r\nALTERNATIVE B - Public Domain (www.unlicense.org)\r\nThis is free and unencumbered software released into the public domain.\r\nAnyone is free to copy, modify, publish, use, compile, sell, or distribute this\r\nsoftware, either in source code form or as a compiled binary, for any purpose,\r\ncommercial or non-commercial, and by any means.\r\nIn jurisdictions that recognize copyright laws, the author or authors of this\r\nsoftware dedicate any and all copyright interest in the software to the public\r\ndomain. We make this dedication for the benefit of the public at large and to\r\nthe detriment of our heirs and successors. We intend this dedication to be an\r\novert act of relinquishment in perpetuity of all present and future rights to\r\nthis software under copyright law.\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\r\nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\nfunction pawsupInline(input: string): string {\r\n    let result = '';\r\n    let i = 0;\r\n    let tag;\r\n\r\n    while (i < input.length) {\r\n        let char = input[i];\r\n\r\n        if ((tag = char === '*' ? 'strong' : char === '_' ? 'em' : char === '~' ? 'strike' : '') && (i === 0 || !/\\s/.test(input[i + 1]))) {\r\n            let end = -1\r\n            for (let j = i + 1; j < input.length; j++) {\r\n                if (input[j] === char && !/[\\s\\\\]/.test(input[j - 1] ?? ' ') && /[\\s_*~`]/.test(input[j + 1] ?? ' ')) {\r\n                    end = j; break;\r\n                }\r\n            }\r\n\r\n            if (end !== -1) {\r\n                let content = input.slice(i + 1, end)\r\n                if (!content.trim()) result += char + char\r\n                else {\r\n                    result += `<${tag}>${pawsupInline(content)}</${tag}>`;\r\n                }\r\n                i = end + 1;\r\n                continue;\r\n            }\r\n        } else if (char === '`' && /\\s/.test(input[i - 1] ?? ' ')) {\r\n            let end = -1\r\n            for (let j = i + 1; j < input.length; j++) {\r\n                if (input[j] === '`' && !/[\\\\]/.test(input[j - 1] ?? ' ')) {\r\n                    end = j;\r\n                    break;\r\n                }\r\n            }\r\n            if (end !== -1) {\r\n                tag = 'code'\r\n                let code = input.slice(i + 1, end).replace(/\\\\`/g, '`');\r\n                result += `<${tag}>${code}</${tag}>`;\r\n                i = end + 1;\r\n\r\n                continue;\r\n            }\r\n        } else if (/^https?:\\/\\/[a-zA-Z0-9\\-]/.test(input.slice(i))) {\r\n            let j = i;\r\n            while (j < input.length && !/\\s/.test(input[j])) j++;\r\n            let url = input.slice(i, j);\r\n            result += `<a href=\"${url}\">${url}</a>`;\r\n            i = j;\r\n            continue;\r\n        }\r\n\r\n        result += char;\r\n        i++;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction pawsup(input: string): string {\r\n    let lines: string[] = []\r\n\r\n    let _lines = input.split('\\n')\r\n    for (let i = 0; i < _lines.length; i++) {\r\n        let line = _lines[i]\r\n        while (_lines[i] && /\\\\$/.test(_lines[i])) {\r\n            line = line.slice(0, -1) + (_lines[++i] ?? '')\r\n        }\r\n        lines.push(line)\r\n    }\r\n\r\n    let output: string[] = []\r\n    let listIndent = 0\r\n    let pAcc = '';\r\n    let commitP = () => {\r\n        if (pAcc.trim()) output.push(`<p>${pawsupInline(pAcc.trim().replace(/\\n/g, '<br>\\n'))}</p>`)\r\n        pAcc = ''\r\n    }\r\n\r\n    for (let i = 0; i < lines.length;) {\r\n        let block = lines[i++]\r\n\r\n        if (/^>/.test(block)) {\r\n            commitP()\r\n            let hashes = 0\r\n            while (block[hashes] == '>') hashes++\r\n            output.push(`<h${hashes}>${pawsupInline(block.slice(hashes).trim())}</h${hashes}>`)\r\n        } else if (/^\\|\\s/.test(block)) {\r\n            commitP()\r\n            while (/^\\|\\s/.test(lines[i])) {\r\n                block += '\\n' + lines[i].slice(2)\r\n                i++\r\n            }\r\n            output.push(`<blockquote>${pawsupInline(block.slice(1).trim())}</blockquote>`)\r\n        } else if (/^\\=\\=\\=\\=*$/.test(block)) {\r\n            commitP()\r\n            output.push(`<hr>`)\r\n        } else if (/^\\/\\/.*$/.test(block)) {\r\n            commitP()\r\n            // comment, push nothing\r\n        } else if (/^@\\S*$/.test(block)) {\r\n            commitP()\r\n            block = block.slice(1)\r\n            if (/^https?:\\/\\/.*\\.(jpg|png|gif|webp)(\\?.*)?$/.test(block)) {\r\n                output.push(`<img src=\"${block}\">`)\r\n            }\r\n        } else if (/^```/.test(block)) {\r\n            let maybeLang = block.match(/```(\\w*)/)![1]\r\n            let lang = maybeLang ? ` lang=\"${maybeLang}\"` : ''\r\n            commitP()\r\n            block = ''\r\n            while (!/^```/.test(lines[i])) {\r\n                block += '\\n' + lines[i]\r\n                i++\r\n            }\r\n            i++\r\n            output.push(`<pre><code${lang}>${block.trim()}</code></pre>`)\r\n        } else if (/^##?\\s/.test(block)) {\r\n            commitP()\r\n            let acc = \"<table>\\n\"\r\n            let entries = ''\r\n            if (/^##/.test(block)) {\r\n                acc += `<thead><tr>${block.slice(2).trim().split(/\\s\\s+/).map(cell => `<th>${pawsupInline(cell.trim())}</th>`).join('')}</tr></thead>\\n`\r\n            } else {\r\n                entries += block.slice(2)\r\n            }\r\n\r\n            while (/^#\\s/.test(lines[i])) {\r\n                entries += '\\n' + lines[i].slice(2)\r\n                i++\r\n            }\r\n            acc += `<tbody>\\n${entries.trim().split('\\n').map(row =>\r\n                `<tr>${row.split(/\\s\\s+/).map(cell => `<td>${pawsupInline(cell.trim())}</td>`).join('')}</tr>`\r\n            ).join('\\n')\r\n\r\n                }\\n</tbody>\\n</table>`\r\n            output.push(acc)\r\n        } else if (/^-/.test(block)) {\r\n            commitP()\r\n\r\n            while (lines[i] && !(/^[\\s]/.test(lines[i]))) {\r\n                block += '\\n' + lines[i]\r\n                i++\r\n            }\r\n            let listLines = block.split('\\n')\r\n            let acc = ''\r\n            let inLi = false\r\n            for (let line of listLines) {\r\n                if (/^-/.test(line)) {\r\n                    if (inLi) acc += '</li>\\n'\r\n                    let dashes = 0 // count the dashes\r\n                    for (let j = 0; line[j] == '-'; j++) dashes++\r\n                    let indentDelta = dashes - listIndent\r\n                    while (indentDelta < 0) {\r\n                        indentDelta++\r\n                        acc += '</ul>\\n'\r\n                    }\r\n                    while (indentDelta > 0) {\r\n                        indentDelta--\r\n                        acc += '<ul>\\n'\r\n                    }\r\n                    acc += '<li>' + line.slice(dashes + 1).trim()\r\n                    inLi = true\r\n                    listIndent = dashes\r\n                } else {\r\n                    acc += line\r\n                }\r\n            }\r\n            if (inLi) acc += '</li>\\n'\r\n            while (listIndent > 0) {\r\n                listIndent--\r\n                acc += '</ul>'\r\n            }\r\n            output.push(acc)\r\n        } else {\r\n            if (!block.trim()) {\r\n                // it was an empty line, commit the previous paragraph\r\n                commitP()\r\n            } else {\r\n                // concat the the existing paragraph\r\n                pAcc += block + '\\n'\r\n            }\r\n        }\r\n    }\r\n    commitP()\r\n\r\n    return output.join('\\n')\r\n}\r\n\r\nexport function paw(strings: TemplateStringsArray, ...values: any[]) {\r\n    return strings.reduce((result, str, i) => result + str + (values[i] || ''), '');\r\n}\r\n\r\nexport { pawsup, pawsupInline }\r\n"
  ],
  "mappings": "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",
  "debugId": "40C1C8C048BF2DB664756E2164756E21",
  "names": []
}